"0","library(xts)"
"0","library(fGarch)"
"0","library(dplyr)"
"0","library(lubridate)"
"0",""
"0","# Example: assuming da_tsibble is your data frame containing the relevant columns"
"0","# da_tsibble <- <your data frame>"
"0",""
"0","modelos_garch <- list()"
"0","ics_modelos_garch  <- list()"
"0","distribuicao_erro  <- c(""norm"", ""std"")"
"0",""
"0","# Loop pelos parâmetros de tipo de distribuição 'm' e 'n'"
"0","for (empresa in unique(da_tsibble$ticker)) {"
"0","  da_filtrado_empresa <- da_tsibble %>%"
"0","    subset(ticker == empresa) %>%"
"0","    select(ref_date, ret_closing_prices, ticker)"
"0","  "
"0","  ret <- xts(da_filtrado_empresa$ret_closing_prices, order.by = ymd(da_filtrado_empresa$ref_date))[-1,]"
"0","  "
"0","  for (distribuicao in distribuicao_erro) {"
"0","    for (m in 1:3) {"
"0","      for (n in 0:3) {"
"0","        # Definir a fórmula do modelo com os parâmetros m e n atuais"
"0","        formula_garch <- paste0(""~garch("", m, "","", n, "")"")"
"0",""
"0","        # Ajustar o modelo GARCH"
"0","        modelo_atual <- garchFit(formula = as.formula(formula_garch), data = ret, trace = FALSE, "
"0","                                 include.mean = TRUE, cond.dist = distribuicao)"
"0",""
"0","        # Armazenar o modelo ajustado na lista para visualização detalhada"
"0","        modelos_garch[[paste0(""garch_"", m, ""_"", n, ""_"", distribuicao, ""_"", empresa)]] <- modelo_atual"
"0","        # Armazenar o modelo ajustado na lista para comparação dos critérios de informação"
"0","        ics_modelos_garch[[paste0(""garch_"", m, ""_"", n, ""_"", distribuicao, ""_"", empresa)]] <- modelo_atual@fit$ics"
"0","      }"
"0","    }"
"0","  }"
"0","}"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"2","Aviso em sqrt(diag(fit$cvar)) :"
"2"," NaNs produzidos
"
"0","# Formatando resultados para melhor visualização "
"0","resultados_tidy <- list()"
"0",""
"0","for (nome_modelo in names(ics_modelos_garch)) {"
"0","  valores <- ics_modelos_garch[[nome_modelo]]"
"0","  df <- data.frame("
"0","    modelo = nome_modelo,"
"0","    ticker = strsplit(nome_modelo, ""_"")[[1]][5],"
"0","    AIC = valores[""AIC""],"
"0","    BIC = valores[""BIC""]"
"0","  )"
"0","  resultados_tidy[[nome_modelo]] <- df"
"0","}"
"0",""
"0","# Combina os data frames em uma única tabela para visualização"
"0","resultados_df <- do.call(rbind, resultados_tidy)"
"0",""
"0","# Encontrar o modelo com menor AIC para cada ticker"
"0","melhor_aic_por_ticker <- resultados_df %>%"
"0","  group_by(ticker) %>%"
"0","  filter(AIC == min(AIC)) %>%"
"0","  ungroup()"
"0",""
"0","print(""Modelos com o menor AIC para cada ticker:"")"
"1","[1]"
"1"," ""Modelos com o menor AIC para cada ticker:"""
"1","
"
"0","print(melhor_aic_por_ticker)"
